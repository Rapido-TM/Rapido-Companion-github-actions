name: "Rapido Deploy"
# Deploy a package.xml from a source org to a target org

on:
  workflow_dispatch:
    inputs:
      # data used to populate the package, destructivePre and destructivePost XML files. Example :
      # {
      #   packageData: [
      #     ApexClass: [
      #       { fullName: "MyClass", type: "ApexClass" }
      #       { fullName: "Other",   type: "ApexClass" }
      #     ],
      #     CustomObject: [
      #       { fullName: "MyObject__c", type: "CustomObject" }
      #     ]
      #   ],
      #
      #   destructivePreData: [
      #     ApexClass: [
      #       { fullName: "ObsoleteClass", type: "ApexClass" }
      #     ]
      #   ],
      #
      #   destructivePostData: [
      #     CustomField: [
      #       { fullName: "MyObject__c.MyObsoleteField__c", type: "CustomField" }
      #     ]
      #   ]
      # }
      data:
        description: "Data used to produce contents of package.xml, including pre- and post-destructive changes (JSON)"
        required: true

      # options used for "sfdx force:source:deploy". Example :
      # {
      #   path_package_xml:                  "manifest/changeset/package.xml",
      #   path_package_xml_destructive_pre:  "manifest/changeset/destructiveChangesPre.xml",
      #   path_package_xml_destructive_post: "manifest/changeset/destructiveChangesPost.xml",
      #
      #   otherOptions: "--ignorewarnings"
      # }
      options:
        description: "Options passed to the deploy command (JSON)"
        required: true

      branch:
        description: "Branch on which to work"
        default: "main"
      commit_message:
        description: "Commit message added when committing the package.xml"
        default: "Created by Rapido Companion"
      sfdx-docker-image:
        description: "Salesforce DX CLI version, for using the CLI docker image (ex: salesforce/salesforcedx:7.190.2-slim)"
        default: "salesforce/salesforcedx:7.207.5-slim"
      salesforce_sfdx_auth_url_source:
        description: "Salesforce DX auth url for source org"
        required: true
      salesforce_sfdx_auth_url_target:
        description: "Salesforce DX auth url for target org"
        required: true

jobs:
  #########################################################################
  # Retrieve package from Salesforce (source org)
  # commit to Github,
  # deploy to Salesforce (target org)
  #

  rapido_deploy:
    runs-on: ubuntu-latest
    container: ${{ inputs.sfdx-docker-image }}
    name: "Deploy : generate package.xml manifests, retrieve, commit, deploy"
    env:
      folder-to-commit: .
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: DEBUG
        if: ${{ true }}
        uses: actions/github-script@v7
        with:
          script: |
            const data = JSON.parse(context.payload.inputs.data)
            console.log("data", data)
            console.log("packageData", data.packageData)
            console.log("destructivePreData", data.destructivePreData)
            console.log("destructivePostData", data.destructivePostData)

            const options = JSON.parse(context.payload.inputs.options)
            console.log("options", options)
            console.log("path_package_xml", options.path_package_xml)
            console.log("path_package_xml_destructive_pre", options.path_package_xml_destructive_pre)
            console.log("path_package_xml_destructive_post", options.path_package_xml_destructive_post)

      #########################################################################
      # Read data and options attributes from inputs (I cannot get fromJSON() to work as expected)

      - name: Get data.packageData
        id: packageData
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: return JSON.parse(context.payload.inputs.data).packageData
      - name: Get data.destructivePreData
        id: destructivePreData
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: return JSON.parse(context.payload.inputs.data).destructivePreData
      - name: Get data.destructivePostData
        id: destructivePostData
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: return JSON.parse(context.payload.inputs.data).destructivePostData

      - name: Get options.path_package_xml
        id: path_package_xml
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: return JSON.parse(context.payload.inputs.options).path_package_xml
      - name: Get options.path_package_xml_destructive_pre
        id: path_package_xml_destructive_pre
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: return JSON.parse(context.payload.inputs.options).path_package_xml_destructive_pre
      - name: Get options.path_package_xml_destructive_post
        id: path_package_xml_destructive_post
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: return JSON.parse(context.payload.inputs.options).path_package_xml_destructive_post

      #########################################################################
      # Generate the package XML files and commit them

      - name: Generate package.xml
        uses: RupertBarrow/actions/action-create-sfdx-package-xml@v3
        with:
          contents: ${{ steps.packageData.outputs.result }}
          path: "${{ steps.path_package_xml.outputs.result }}"

      - name: Generate package XML for destructive-changes-pre
        if: ${{ steps.destructivePreData.outputs.result }}
        uses: RupertBarrow/actions/action-create-sfdx-package-xml@v3
        with:
          contents: ${{ steps.destructivePreData.outputs.result }}
          path: "${{ steps.path_package_xml_destructive_pre.outputs.result }}"

      - name: Generate package XML for destructive-changes-post
        if: ${{ steps.destructivePostData.outputs.result }}
        uses: RupertBarrow/actions/action-create-sfdx-package-xml@v3
        with:
          contents: ${{ steps.destructivePostData.outputs.result }}
          path: "${{ steps.path_package_xml_destructive_post.outputs.result }}"

      - name: Commit to Github
        uses: RupertBarrow/actions/action-commit@v3
        with:
          commit_message: ${{ github.event.inputs.commit_message }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      #########################################################################
      # Retrieve and deploy

      - name: Retrieve metadata from Salesforce (source org)
        uses: RupertBarrow/actions/action-command@v3
        with:
          salesforce_sfdx_auth_url: ${{ github.event.inputs.salesforce_sfdx_auth_url_source }}
          #command: "sfdx force:source:retrieve -x ${{ steps.path_package_xml.outputs.result }}"
          command: "sf project retrieve start --ignore-conflicts --manifest=${{ steps.path_package_xml.outputs.result }}"

      - name: Command options for deploy
        id: deployOptions
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            let options = ""
            options += " --manifest='${{ steps.path_package_xml.outputs.result }}'"
            options += '${{ steps.destructivePreData.outputs.result  }}' !== '' ? " --pre-destructive-changes='${{  steps.path_package_xml_destructive_pre.outputs.result  }}'" : ""
            options += '${{ steps.destructivePostData.outputs.result }}' !== '' ? " --post-destructive-changes='${{ steps.path_package_xml_destructive_post.outputs.result }}'" : ""
            options += " ${{ github.event.inputs.options.otherOptions }} --ignore-conflicts"
            return options

      - name: Deploy metadata to Salesforce (target org)
        id: deploy
        uses: RupertBarrow/actions/action-command@v3
        with:
          salesforce_sfdx_auth_url: ${{ github.event.inputs.salesforce_sfdx_auth_url_target }}
          #command: "sfdx force:source:deploy ${{ steps.deployOptions.outputs.result }}"
          command: "sf project deploy start ${{ steps.deployOptions.outputs.result }} --json"
